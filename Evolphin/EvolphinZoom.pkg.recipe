<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Description</key>
	<string>Packages Evolphin Zoom for installation.

NOTES:
- This recipe depends on hjuutilainen's ChecksumVerifier.  Add this repo via:

autopkg repo-add hjuutilainen-recipes

- This recipe does not download the Evolphin Zoom package--feed the package into the recipe via the following format:

autopkg run EvolphinZoom.pkg -p /path/to/EvolphinZoom.pkg</string>
	<key>Identifier</key>
	<string>com.github.foigus.pkg.EvolphinZoom</string>
	<key>Input</key>
	<dict>
		<key>NAME</key>
		<string>EvolphinZoom</string>
	</dict>
	<key>MinimumVersion</key>
	<string>0.5.1</string>
	<key>Process</key>
	<array>
		<dict>
			<key>Comment</key>
			<string>Not going to tackle downloading the software right now</string>
			<key>Processor</key>
			<string>PackageRequired</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>destination_path</key>
				<string>%RECIPE_CACHE_DIR%/unpack</string>
				<key>flat_pkg_path</key>
				<string>%PKG%</string>
				<key>purge_destination</key>
				<true/>
			</dict>
			<key>Comment</key>
			<string>Unpack the package</string>
			<key>Processor</key>
			<string>FlatPkgUnpacker</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>algorithm</key>
				<string>MD5</string>
				<key>checksum</key>
				<string>b829d3f425856c5a0f06d7ad4b537af6</string>
				<key>pathname</key>
				<string>%RECIPE_CACHE_DIR%/unpack/zoom.pkg/Scripts/preinstall</string>
			</dict>
			<key>Comment</key>
			<string>Verify "preinstall" MD5 matches 7.2.2 release 58</string>
			<key>Processor</key>
			<string>io.github.hjuutilainen.SharedProcessors/ChecksumVerifier</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>algorithm</key>
				<string>MD5</string>
				<key>checksum</key>
				<string>1ee65da5a523b1f227a1bf36baae193f</string>
				<key>pathname</key>
				<string>%RECIPE_CACHE_DIR%/unpack/zoom.pkg/Scripts/postinstall</string>
			</dict>
			<key>Comment</key>
			<string>Verify "postinstall" MD5 matches 7.2.2 release 58</string>
			<key>Processor</key>
			<string>io.github.hjuutilainen.SharedProcessors/ChecksumVerifier</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>path_list</key>
				<array>
					<string>%RECIPE_CACHE_DIR%/unpack/zoom.pkg/Scripts/preinstall</string>
				</array>
			</dict>
			<key>Comment</key>
			<string>Delete "preinstall" in prep for it to be replaced</string>
			<key>Processor</key>
			<string>PathDeleter</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>file_content</key>
				<string>#!/bin/sh

SCRIPT_PATH="`dirname "$0"`"
PACKAGE_PATH="$1"
TARGET_LOCATION="$2"
TARGET_VOL="$3"

NO_AIR=$4

FAILED_TO_STOP_ZOOM_SERVER=50
FAILED_TO_STOP_PREVIEW_SERVER=51



echo "Script path: $SCRIPT_PATH";
echo "Package location: $PACKAGE_PATH";
echo "Target location:$TARGET_LOCATION";
echo "Target volume: $TARGET_VOL";
echo "User: $USER";


msg(){
  echo "Message: $1"
}

error(){
  osascript "$SCRIPT_PATH/msg.applescript" "$1"  
}

#By default, $TARGET_LOCATION == /Applications/Evolphin
#ZOOM_INSTALL_DIR points to Evolphin/zoom, but all zoom files are present in Evolphin/zoom/Resources
ZOOM_INSTALL_DIR="$TARGET_LOCATION/zoom"
ZOOM_RESOURCES="$ZOOM_INSTALL_DIR/Resources"

# Delete tmp and tmp2 folders to avoid issues w/ Jetty's JSP compilation
rm -rf "/Library/Application Support/Evolphin"
rm -rf "/Users/$USER/Library/Application Support/Evolphin"
rm -rf $ZOOM_RESOURCES/tmp
rm -rf $ZOOM_RESOURCES/tmp2

mkdir -p "$TARGET_LOCATION"
if [ ! -d "$TARGET_LOCATION" ]; then
  msg "Stopping installer, target location does not exist"
  exit 1;
fi
cd "$TARGET_LOCATION"

msg "Stopping zoom server if possible...."
zoomFilePath=$(which zoom)
msg "$zoomFilePath"

if [ -f "$zoomFilePath" ]; then
  msg "Zoom file path found: $zoomFilePath"
  "$zoomFilePath" stop
  sleep 2
  ZOOM_FOUND="true"
else
  msg "Zoom server not found at system path. Checking current target location"
  if [ -f /Applications/Evolphin/zoom/Resources/bin/zoom ]; then
    msg "Install destination contains Zoom server. Stopping zoom..."
    /Applications/Evolphin/zoom/Resources/bin/zoom stop
    sleep 2
    ZOOM_FOUND="true"
  else
    msg "Zoom server is not found at $TARGET_LOCATION. Proceeding with normal install"
  fi
fi

msg "Stopping preview server if possible...."
previewFilePath=$(which preview-server)
msg "$previewFilePath"

if [ -f "$previewFilePath" ]; then
  msg "Preview Server file path found: $previewFilePath"
  "$previewFilePath" stop
  sleep 2
  PREVIEW_FOUND="true"
else
  msg "Preview server not found at system path. Checking current target location"
  if [ -f /Applications/Evolphin/zoom/Resources/bin/preview-server ]; then
    msg "Install destination contains Preview Server. Stopping preview server..."
    /Applications/Evolphin/zoom/Resources/bin/preview-server stop
    sleep 2
    PREVIEW_FOUND="true"
  else
    msg "Preview Server is not found at $TARGET_LOCATION. Proceeding with normal install"
  fi
fi

#Stop client proxy
if [ -d zoom ]; then
 cd zoom

  LAUNCH_AGENTS_DIR="/Library/LaunchAgents"
  CL_PROXY_PLIST="com.evolphin.zoom.clientproxy.plist"
  LIB_CL_PROXY_PLIST="$LAUNCH_AGENTS_DIR/$CL_PROXY_PLIST"
  CL_FSCUE_PLIST="com.evolphin.zoom.FSCue.plist"
  LIB_CL_FSCUE_PLIST="$LAUNCH_AGENTS_DIR/$CL_FSCUE_PLIST"

  msg "Client proxy launch plist path: $LIB_CL_PROXY_PLIST"

  if [ -f "$LIB_CL_PROXY_PLIST" ]; then
    msg "Calling cmd: launchctl unload -S Aqua -F $LIB_CL_PROXY_PLIST"
    su -m $USER -c "launchctl unload -S Aqua -F \"$LIB_CL_PROXY_PLIST\""
    msg "Removing... $LIB_CL_PROXY_PLIST"
    rm -f "$LIB_CL_PROXY_PLIST"
  fi

  msg "FSCue launch plist path: $LIB_CL_FSCUE_PLIST"

  if [ -f "$LIB_CL_FSCUE_PLIST" ]; then
    msg "Calling cmd: launchctl unload -S Aqua -F $LIB_CL_FSCUE_PLIST"
    su -m $USER -c "launchctl unload -S Aqua -F \"$LIB_CL_FSCUE_PLIST\""
    msg "Removing... $LIB_CL_FSCUE_PLIST"
    rm -f "$LIB_CL_FSCUE_PLIST"
  fi
  cd -
fi

# Backup previous conf dir, if any
if [ -d zoom/Resources/conf ]; then
  msg "Backing up previous conf -&gt; conf.old"
  rm -rf zoom/Resources/conf.old
  mv zoom/Resources/conf zoom/Resources/conf.old
fi

#final check for zoom status, It should've stopped
msg "Sleeping for 3 seconds"
sleep 3


if [ "$ZOOM_FOUND" = "true" ]; then
  status=$(zoom/Resources/bin/zoom status)
  isRunning=$(echo "$status" |grep -c "not")
  echo "$isRunning"
  if [ $isRunning -eq 0 ]; then
    echo "SEVERE: Failed to stop zoom server. Halting installer"
    error "Failed to stop zoom server! Please stop zoom server first then try again."
    exit $FAILED_TO_STOP_ZOOM_SERVER
  fi
fi

if [ "$PREVIEW_FOUND" = "true" ]; then
  status=$(zoom/Resources/bin/preview-server status)
  isRunning=$(echo "$status" |grep -c "not")
  echo "$isRunning"
  if [ $isRunning -eq 0 ]; then
    echo "SEVERE: Failed to stop Preview Server. Halting installer"
    error "Failed to stop Preview Server! Please stop Preview Server first then try again."
    exit $FAILED_TO_STOP_PREVIEW_SERVER
  fi
fi

# Uninstall Zoom Plugin from Adobe CS
##Commenting this out, since we don't have CS-era applications with Zoom installed
##ADOBE_EXTENSION_MNG6_PATH="/Applications/Adobe Extension Manager CS6/Adobe Extension Manager CS6.app/Contents/MacOS/Adobe Extension Manager CS6"
## if [ -f "$ADOBE_EXTENSION_MNG6_PATH" ]; then
##   su -l $USER -c '"/Applications/Adobe Extension Manager CS5/Adobe Extension Manager CS5.app/Contents/MacOS/Adobe Extension Manager CS5" -suppress -remove product="Photoshop CS5" extension="com.zoom.plugin"'
## fi
##
##ADOBE_EXTENSION_MNG_PATH="/Applications/Adobe Extension Manager CS5/Adobe Extension Manager CS5.app/Contents/MacOS/Adobe Extension Manager CS5"
##  if [ -f "$ADOBE_EXTENSION_MNG_PATH" ]; then
##    su -l $USER -c '"/Applications/Adobe Extension Manager CS6/Adobe Extension Manager CS6.app/Contents/MacOS/Adobe Extension Manager CS6" -suppress -remove product="Photoshop CS6" extension="com.zoom.plugin"'
##  fi

exit 0


</string>
				<key>file_mode</key>
				<string>0755</string>
				<key>file_path</key>
				<string>%RECIPE_CACHE_DIR%/unpack/zoom.pkg/Scripts/preinstall</string>
			</dict>
			<key>Comment</key>
			<string>Overwrite "preinstall", note this is the same script as "722_preinstall_modified" in this repo</string>
			<key>Processor</key>
			<string>FileCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>path_list</key>
				<array>
					<string>%RECIPE_CACHE_DIR%/unpack/zoom.pkg/Scripts/postinstall</string>
				</array>
			</dict>
			<key>Comment</key>
			<string>Delete "postinstall" in prep for it to be replaced</string>
			<key>Processor</key>
			<string>PathDeleter</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>file_content</key>
				<string>#!/bin/sh


SCRIPT_PATH="`dirname "$0"`"
PACKAGE_PATH=$1
TARGET_LOCATION=$2
TARGET_VOL=$3

NO_AIR=$4


msg(){
  echo "Message: $1"
}

msg "Username: $USER"
msg "Home: $HOME"

error(){
  osascript "$SCRIPT_PATH/msg.applescript" "$1"
}

msg "Script path: $SCRIPT_PATH";
msg "Package location: $PACKAGE_PATH";
msg "Target location:$TARGET_LOCATION";
msg "Target volume: $TARGET_VOL";

pwd

if [ ! -d "$TARGET_LOCATION" ]; then
  msg "mkdir -p $TARGET_LOCATION"
  mkdir -p "$TARGET_LOCATION"
  if [ ! -d "$TARGET_LOCATION" ]; then
    msg "Even after mkdir -p, target location does not exist. Halting installer!"
    exit 33;
  fi
fi

cd "$TARGET_LOCATION"

if [ ! -d zoom ]; then
  msg "SEVERE: Target location does not contain zoom"
  exit 1;
fi

cd zoom
currentDir="`pwd`"
msg "Dir changed to $currentDir"

delete(){
  if [ -d "$1" ]; then
    if [ -L "$1" ]; then
      msg "Removing link: $1."
      rm "$1"
    else
      msg "Removing dir: $1"
      rm -r "$1"
    fi
  else
    msg "Not removing link: $1 does not exist"
  fi
}

msg "Changing mod to 775..."
msg "Pwd:`pwd`"

chmod -R 775 .

### Create link to ffmpeg 32/64-bit version depending on host machine
##### Detect if 64 bit or 32 bit
if sysctl hw | grep "cpu64bit_capable" | grep -q ": 1"
then
	ARCH="x86_64"
else
	ARCH="x86_32"
fi
##### Create ffmpeg link
if [ -d Resources/lib/imagemagick ]; then
  cd "Resources/lib/imagemagick"
  msg "Dir changed to: `pwd`"
  for exe in ffmpeg ffprobe avconv qt-faststart; do
    if [ -e $exe-$ARCH ]; then
      msg "Creating link:  $exe --&gt; $exe-$ARCH"
      ln -f -s $exe-$ARCH $exe
    fi
  done
  cd -
fi

### Create zm client proxy link
curDir="$currentDir"
if [ -d zmclientproxy.app/Contents ]; then
  cd "zmclientproxy.app/Contents"
  msg "Dir changed to:`pwd`"
  delete MacOS
  msg "Creating link: MacOS --&gt; ../../Resources/bin"
  ln -f -s ../../Resources/bin MacOS
  cd -
fi

#create link mac os link to bin

if [ -d Resources/resources/Zoom\ UI.app ]; then
  cd "Resources/resources/Zoom UI.app/Contents"
  delete MacOS
  ln -f -s ../../../bin MacOS
  cd -
fi

#Link air executables

curDir="$currentDir"
if [ -d Resources/air/zmvisuallog ]; then
  cd "Resources/air/zmvisuallog"
  msg "Dir changed to: `pwd`"
  delete zmvisuallog
  msg "Creating link:  zmvisuallog --&gt; ../../../Visual\ Log.app/Contents/MacOS/Visual\ Log"
  ln -f  -s ../../../Visual\ Log.app/Contents/MacOS/Visual\ Log zmvisuallog
  cd -
fi


if [ -d Resources/air/zmvisualsearch ]; then
  cd "Resources/air/zmvisualsearch"
  msg "Dir changed to: `pwd`"
  delete zmvisualsearch
  msg "Creating link:  zmvisualsearch --&gt; ../../../Asset\ Browser.app/Contents/MacOS/Asset\ Browser"
  ln -f -s ../../../Asset\ Browser.app/Contents/MacOS/Asset\ Browser zmvisualsearch
  cd -
fi

if [ -d Resources/air/zmcheckindialog ]; then
  cd "Resources/air/zmcheckindialog"
  msg "Dir changed to: `pwd`"
  delete zmcheckindialog
  msg "Creating link:  ZmDialog --&gt; ../../../Check-In\ Dialog.app/Contents/MacOS/ZmDialog"
  ln -f -s ../../../Check-In\ Dialog.app/Contents/MacOS/Check-In\ Dialog zmcheckindialog
  cd -
fi


if [ "$NO_AIR" = "true" ]; then
  msg "Skipping server start and air installation."
  exit 0;
fi



#Intall air runtime
if [ $NO_AIR != "true" ]; then
  . "$SCRIPT_PATH/air-check.sh" "Resources/dependencies/Adobe AIR Installer.app/Contents/MacOS/Adobe AIR Installer"
fi

rm -rf "Resources/dependencies/Adobe AIR Installer.app/Contents/MacOS/Adobe AIR Installer"

##### Create link for X11 on Yosemite+
if [ ! -e /usr/X11 ]; then
  if [ -d /opt/X11 ]; then
    ln -s /opt/X11 /usr/X11
  fi
fi

#install plugin for cs6
##Commenting this out, since we don't have CS-era applications with Zoom installed
##ADOBE_EXTENSION_MNG_PATH="/Applications/Adobe Extension Manager CS6/Adobe Extension Manager CS6.app/Contents/MacOS/Adobe Extension Manager CS6"
##
##ZM_CS_PLUGIN="Resources/plug-ins/ZmAdobePlugin.zxp"
##if [ -f "$ADOBE_EXTENSION_MNG_PATH" ]; then
##  if [ ! -f "$ZM_CS_PLUGIN" ]; then
##    msg "Plugin file not found to install: $ZM_CS_PLUGIN"
##  else
##    ##instaling plugin
##    msg "Running cmd: $ADOBE_EXTENSION_MNG_PATH -suppress -install zxp=$ZM_CS_PLUGIN"
##    /Applications/Adobe\ Extension\ Manager\ CS6/Adobe\ Extension\ Manager\ CS6.app/Contents/MacOS/Adobe\ Extension\ Manager\ CS6 -suppress -install zxp="$ZM_CS_PLUGIN"
##  fi
##fi
##
###install plugin for cs5
##  ADOBE_EXTN_MNG_CS5_PATH="/Applications/Adobe Extension Manager CS5/Adobe Extension Manager CS5.app/Contents/MacOS/Adobe Extension Manager CS5"
##  ZM_CS_PLUGIN="Resources/plug-ins/ZmAdobePlugin.zxp"
##  if [ -f "$ADOBE_EXTN_MNG_CS5_PATH" ]; then
##    if [ ! -f "$ZM_CS_PLUGIN" ]; then
##      msg "Plugin file not found to install: $ZM_CS_PLUGIN"
##    else
##      ##instaling plugin
##      msg "Running cmd: $ADOBE_EXTN_MNG_CS5_PATH -suppress -install zxp=$ZM_CS_PLUGIN"
##      /Applications/Adobe\ Extension\ Manager\ CS5/Adobe\ Extension\ Manager\ CS5.app/Contents/MacOS/Adobe\ Extension\ Manager\ CS5 -suppress -install zxp="$ZM_CS_PLUGIN"
##    fi
##  fi



# If previous conf dir backed-up, backup new conf,
# and make previous conf dir present one
if [ -d Resources/conf.old ]; then
  msg "Backing up default conf -&gt; conf.orig"
  rm -rf Resources/conf.orig
#copy only old server.xml and license file to new server.xml
  msg "Restoring old server.xml";
  if [ -f Resources/conf.old/server.xml ]; then
    rm Resources/conf/server.xml;
    cp Resources/conf.old/server.xml Resources/conf;
  fi
  msg "Restoring license file";
  if [ -f Resources/conf.old/zoom.key ]; then
    cp Resources/conf.old/zoom.key Resources/conf;
  fi

  mv Resources/conf.old Resources/conf
fi


# Make link of all the jars in tic folder to the Conents/Java Folder
# And make a link to he re packed in PlugIns/jdk folder Both these are done only for Java apps. Not the commands
CURRENT_DIR=`pwd`;
for appDir in *.app ; do
    if [ -d "$appDir/Contents/Java" ]; then
        cd "$appDir/Contents/Java";
        # Make a link to the conf/ dir from all the Contents/Java/ dirs.
        ln -s ../../../Resources/conf/ conf
        find ../../../Resources/lib -name "*.jar" -exec ln {} \;       #msking relative hard links
	#ln -s `pwd`/Resources/jre "$appDir/Contents/PlugIns/jdk/Contents/Home/jre";
	      cd - ;
    fi
done

cd "$CURRENT_DIR";



#Copy zoom server and client proxy plist file to /Library/LaunchAgents and /Library/LaunchDaemons respectively
CL_PROXY_PLIST="com.evolphin.zoom.clientproxy.plist"
CONF_CLIENTPRXY_FILE="Resources/conf/$CL_PROXY_PLIST"
CL_PROXY_APP="`pwd`/zmclientproxy.app"
LIB_CL_PROXY_PLIST="/Library/LaunchAgents/$CL_PROXY_PLIST"

msg "Client proxy exec path: $CL_PROXY_APP"

if [ -f "$LIB_CL_PROXY_PLIST" ]; then
  msg "Calling cmd: launchctl unload -S Aqua -F $LIB_CL_PROXY_PLIST"
  su -m $USER -c "launchctl unload -S Aqua -F \"$LIB_CL_PROXY_PLIST\""
  msg "Removing... $LIB_CL_PROXY_PLIST"  
  rm -f "$LIB_CL_PROXY_PLIST" 
fi

if [ -f "$CONF_CLIENTPRXY_FILE" ]; then
  msg "Copying plist file to /Launch/LaunchAgents"
  sed "s|@ZM_CLIENT_PROXY_APP@|$CL_PROXY_APP|g"  "$CONF_CLIENTPRXY_FILE" &gt; "$LIB_CL_PROXY_PLIST"
  msg "Running cmd: launchctl load -S Aqua -F $LIB_CL_PROXY_PLIST"
  su -m $USER -c "launchctl load -S Aqua -F \"$LIB_CL_PROXY_PLIST\""
else
  msg "Plist file for client proxy not found."
fi

CL_FSCUE_NAME_PKG="com.evolphin.zoom.FSCue"
CL_FSCUE_PLIST="$CL_FSCUE_NAME_PKG.plist"
CONF_FSCUE_FILE="Resources/conf/$CL_FSCUE_PLIST"
CL_FSCUE_APP="`pwd`/FSCue.app"
LIB_CL_FSCUE_PLIST="/Library/LaunchAgents/$CL_FSCUE_PLIST"

msg "FSCue exec path: $CL_FSCUE_APP"

if [ -f "$LIB_CL_FSCUE_PLIST" ]; then
  msg "Calling cmd: launchctl unload -S Aqua -F $LIB_CL_FSCUE_PLIST"
  su -m $USER -c "launchctl unload -S Aqua -F \"$LIB_CL_FSCUE_PLIST\""
  msg "Removing... $LIB_CL_FSCUE_PLIST"
  rm -f "$LIB_CL_FSCUE_PLIST"
fi

if [ -f "$CONF_FSCUE_FILE" ]; then
  msg "Copying plist file to /Launch/LaunchAgents"
  sed "s|@ZM_FSCUE_APP@|$CL_FSCUE_APP|g" "$CONF_FSCUE_FILE" &gt; /tmp/FSCue.plist.tmp
  sed "s|\/true|true\/|g" /tmp/FSCue.plist.tmp &gt; "$LIB_CL_FSCUE_PLIST"
  msg "Running cmd: launchctl load -S Aqua -F $LIB_CL_FSCUE_PLIST"
  su -m $USER -c "launchctl load -S Aqua -F \"$LIB_CL_FSCUE_PLIST\""
  rm /tmp/FSCue.plist.tmp

  if [ ! -f "/tmp/$CL_FSCUE_NAME_PKG.out" ]; then
    touch "/tmp/$CL_FSCUE_NAME_PKG.out"
  fi
  chmod 775 "/tmp/$CL_FSCUE_NAME_PKG.out"

  if [ ! -f "/tmp/$CL_FSCUE_NAME_PKG.err" ]; then
    touch "/tmp/$CL_FSCUE_NAME_PKG.err"
  fi
  chmod 775 "/tmp/$CL_FSCUE_NAME_PKG.err"

  if [ ! -f "/tmp/fscue.log" ]; then
    touch "/tmp/fscue.log"
  fi
  chmod 775 "/tmp/fscue.log"

else
  msg "Plist file for FSCue not found."
fi


ZOOM_SERVER_INSTALLED=`[ -f Resources/bin/zoom ]; echo $?;`

ZOOM_SERVER_PLIST="com.evolphin.zoom.server.plist"
ZOOM_SERVER_PLIST_FILE="Resources/conf/$ZOOM_SERVER_PLIST"
ZOOM_INSTALL_DIR=`pwd`
LIB_ZOOM_SERVER_PLIST="/Library/LaunchDaemons/$ZOOM_SERVER_PLIST"

if [ -f "$LIB_ZOOM_SERVER_PLIST" ]; then
  msg "Calling cmd: launchctl unload $LIB_ZOOM_SERVER_PLIST"
  launchctl unload -F "$LIB_ZOOM_SERVER_PLIST"
  msg "Removing... $LIB_ZOOM_SERVER_PLIST"
  rm -f "$LIB_ZOOM_SERVER_PLIST"
fi

if [ $ZOOM_SERVER_INSTALLED -eq 0 ]; then
  if [ -f "$ZOOM_SERVER_PLIST_FILE" ]; then
    msg "Copying plist file to /Launch/LaunchDaemons"
    sed "s|@ZOOM_INSTALL_DIR@|$ZOOM_INSTALL_DIR|g"  "$ZOOM_SERVER_PLIST_FILE" &gt; "$LIB_ZOOM_SERVER_PLIST"
    msg "Running cmd: launchctl load -F $LIB_ZOOM_SERVER_PLIST"
    launchctl load -F "$LIB_ZOOM_SERVER_PLIST"
  else
    msg "Plist file for zoom server not found."
  fi
fi


PREVIEW_SERVER_INSTALLED=`[ -f Resources/bin/preview-server ]; echo $?;`

PREVIEW_SERVER_PLIST="com.evolphin.zoom.preview-server.plist"
PREVIEW_SERVER_PLIST_FILE="Resources/conf/$PREVIEW_SERVER_PLIST"
LIB_PREVIEW_SERVER_PLIST="/Library/LaunchDaemons/$PREVIEW_SERVER_PLIST"

if [ -f "$LIB_PREVIEW_SERVER_PLIST" ]; then
  msg "Calling cmd: launchctl unload $LIB_PREVIEW_SERVER_PLIST"
  launchctl unload -F "$LIB_PREVIEW_SERVER_PLIST"
  msg "Removing... $LIB_PREVIEW_SERVER_PLIST"
  rm -f "$LIB_PREVIEW_SERVER_PLIST"
fi

if [ $PREVIEW_SERVER_INSTALLED -eq 0 ]; then
  if [ -f "$PREVIEW_SERVER_PLIST_FILE" ]; then
    msg "Copying plist file to /Launch/LaunchDaemons"
    sed "s|@ZOOM_INSTALL_DIR@|$ZOOM_INSTALL_DIR|g"  "$PREVIEW_SERVER_PLIST_FILE" &gt; "$LIB_PREVIEW_SERVER_PLIST"
    msg "Running cmd: launchctl load -F $LIB_PREVIEW_SERVER_PLIST"
    launchctl load -F "$LIB_PREVIEW_SERVER_PLIST"
  else
    msg "Plist file for preview server not found."
  fi
fi



# Hey we are still in zoom
# Create zoom, zm and zm-dlg aliases in /usr/local/bin, adding /usr/local/bin to PATH if absent
if [ ! -d /usr/local/bin ]; then
  mkdir -p /usr/local/bin
fi
grep "/usr/local/bin" /etc/paths &amp;&gt; /dev/null
if [ $? -ne 0 ]; then
  msg "Adding /usr/local/bin to PATH"
  echo "/usr/local/bin" &gt;&gt; /etc/paths
fi

cd /usr/local/bin
USR_LOCAL_BIN=`pwd`
if [ $ZOOM_SERVER_INSTALLED -eq 0 ]; then
  if [ -L zoom ]; then
    msg "Removing symbolic link $USR_LOCAL_BIN/zoom -&gt; `readlink -n zoom`"
    rm -f zoom
  fi
  if [ ! -e zoom ]; then
    msg "Creating a symbolic link $USR_LOCAL_BIN/zoom -&gt; $currentDir/Resources/bin/zoom"
    ln -s "$currentDir/Resources/bin/zoom" zoom
  else
    msg "Not creating symbolic link /usr/local/bin/zoom as a file exists with the same name."
  fi
else
  if [ ! -f "/Users/$USER/.zm/zoom.properties" ]; then
    msg "Creating zoom.properties in the user's .zm folder since this is a server install."
    cp "/Applications/Evolphin/zoom/Resources/conf/default-zoom.properties" "/Users/$USER/.zm/zoom.properties"
  fi
fi

if [ -L zm ]; then
  msg "Removing symbolic link $USR_LOCAL_BIN/zm -&gt; `readlink -n zm`"
  rm -f zm
fi
if [ ! -e zm ]; then
  msg "Creating a symbolic link $USR_LOCAL_BIN/zm -&gt; $currentDir/Resources/bin/zm"
  ln -s "$currentDir/Resources/bin/zm" zm
else
  msg "Not creating symbolic link /usr/local/bin/zm as a file exists with the same name."
fi

if [ -L zm-dlg ]; then
  msg "Removing symbolic link $USR_LOCAL_BIN/zm-dlg -&gt; `readlink -n zm-dlg`"
  rm -f zm-dlg
fi
if [ ! -e zm-dlg ]; then
  msg "Creating a symbolic link $USR_LOCAL_BIN/zm-dlg -&gt; $currentDir/Resources/resources/Zoom UI.app/Contents/MacOS/dlglauncher"
  ln -s "$currentDir/Resources/resources/Zoom UI.app/Contents/MacOS/dlglauncher" zm-dlg
else
  msg "Not creating symbolic link /usr/local/bin/zm-dlg as a file exists with the same name."
fi
cd "$currentDir"

# Wait for zoom server or clientproxy to initialize, on server and client, respectively. 
sleep 15

#1. Start zoom server....
#2. Open browser with zoom webmin if server

if [ $ZOOM_SERVER_INSTALLED -eq 0 ]; then
  status=$(Resources/bin/zoom status)
  isRunning=$(echo "$status" |grep -c "not")
  msg "Zoom server is running: $isRunning"
  if [ $isRunning -eq 0 ]; then
    msg "Zoom server is running. Now opening browser"
    sleep 10
    open webmin.app
  fi
##Don't need to open a webpage here
##else
##  open http://help.evolphin.com/guides/getting-started
fi

# Enable Evolphin Zoom service in Services Preferences
#osascript "$SCRIPT_PATH/prefs.applescript" # FIXME: [OBSOLETE] This line is not needed any more.
if [ -f "$HOME/Library/Preferences/pbs.plist" ];then
  plutil -convert xml1 $HOME/Library/Preferences/pbs.plist -o /tmp/pbs-orig.plist.xml
  sed '/com.evolphin.zoom.zmclientproxy/,/enabled_services_menu/s/false/true/g' /tmp/pbs-orig.plist.xml &gt; /tmp/pbs.plist.xml
  plutil -convert binary1 /tmp/pbs.plist.xml -o $HOME/Library/Preferences/pbs.plist
  rm /tmp/pbs-orig.plist.xml /tmp/pbs.plist.xml
  # for some reason, the Evolphin Zoom context menu shows up the first time you right click, and then all context items disappear
  su -l $USER -c "sleep 5; /System/Library/CoreServices/pbs -update &amp;&gt; /dev/null" &amp;
  #su -l $USER -c "sleep 10; /System/Library/CoreServices/pbs -existing_languages &amp;&gt; /dev/null" &amp;
  su -l $USER -c "sleep 10; /System/Library/CoreServices/pbs -update &amp;&gt;/dev/null" &amp;
  #su -l $USER -c "sleep 10; /System/Library/CoreServices/pbs -existing_languages &amp;&gt; /dev/null" &amp;
  #while [ -z "`su -l $USER -c '/System/Library/CoreServices/pbs -dump_pboard' | grep 'Evolphin Zoom'`" ]; do
  #  su -l $USER -c "/System/Library/CoreServices/pbs -existing_languages"
  #done
fi

if [ -d Resources/plug-ins/pluginInstaller ]; then
  cd "Resources/plug-ins/pluginInstaller"
  sh ./AdobePluginInstaller_mac.sh
fi
cd "$currentDir"

if [ -d Resources/plug-ins/pluginInstaller ]; then
  cd "Resources/plug-ins/pluginInstaller"
  sh ./Cinema4DPluginInstaller_mac.sh
fi
cd "$currentDir"

exit 0

</string>
				<key>file_mode</key>
				<string>0755</string>
				<key>file_path</key>
				<string>%RECIPE_CACHE_DIR%/unpack/zoom.pkg/Scripts/postinstall</string>
			</dict>
			<key>Comment</key>
			<string>Overwrite "postinstall" note this is the same script as "722_postinstall_modified" in this repo</string>
			<key>Processor</key>
			<string>FileCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>pkgdirs</key>
				<dict/>
				<key>pkgroot</key>
				<string>%RECIPE_CACHE_DIR%/repack</string>
			</dict>
			<key>Comment</key>
			<string>Prep to flatten the now-fixed package</string>
			<key>Processor</key>
			<string>PkgRootCreator</string>
		</dict>
		<dict>
			<key>Arguments</key>
			<dict>
				<key>destination_pkg</key>
				<string>%RECIPE_CACHE_DIR%/repack/EvolphinZoom.pkg</string>
				<key>source_flatpkg_dir</key>
				<string>%RECIPE_CACHE_DIR%/unpack</string>
			</dict>
			<key>Comment</key>
			<string>Flatten the fixed package</string>
			<key>Processor</key>
			<string>FlatPkgPacker</string>
		</dict>
	</array>
</dict>
</plist>
